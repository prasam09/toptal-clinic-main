//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1604552287302 implements Auth.RegistrationHandler{
    global boolean canCreateUser(Auth.UserData data) {
        //TODO: Check whether we want to allow creation of a user with this data
        //Set<String> s = new Set<String>{'usernamea', 'usernameb', 'usernamec'};
        //if(s.contains(data.username)) {
            //return true;
        //}
        return true;
    }

    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        
     
           
            system.debug('data111-----'+data);

            //We have a community id, so create a user with community access
            //TODO: Get an actual account
            Account a = new Account();
            a.name = data.firstName+' '+data.lastName;
            a.recordTypeId = GenericUtils.getRTIdByRTDevName(Account.sObjectType, 'PhysicianAccount');
            insert a; 

            Contact c = new Contact();
            c.accountId = a.Id;
            c.email = data.email;
            c.firstName = data.firstName;
            c.lastName = data.lastName;
        	c.recordTypeId = GenericUtils.getRTIdByRTDevName(Contact.sObjectType, 'Physicians');
            insert(c);

            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='Physician Community User'];
            u.username =  data.email;//data.username + '@acmecorp.com';
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            u.RefreshToken__c = data.attributeMap.get('refreshToken');
            String alias = data.firstName+''+data.lastName;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = UserInfo.getLocale();
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            u.contactId = c.Id;
            return u;
      
    }

    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        User u = new User(id=userId);
        system.debug('daattributeMapta-----'+data.attributeMap);
        system.debug('identifier-----'+data.identifier);
        system.debug('firstName-----'+data.firstName);
        system.debug('lastName-----'+data.lastName);
        system.debug('fullName-----'+data.fullName);
        system.debug('email-----'+data.email);
        system.debug('userName-----'+data.userName);
        system.debug('locale-----'+data.locale);
        system.debug('link-----'+data.link);
        system.debug('provider-----'+data.provider);
        system.debug('siteLoginUrl-----'+data.siteLoginUrl);
        
		u.RefreshToken__c = data.attributeMap.get('refreshToken');


        //TODO: Customize the username. Must be 80 characters or less.
        //u.username = data.username + '@myorg.com';
        /* u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName; */
        //String alias = data.username;
        //Alias must be 8 characters or less
        //if(alias.length() > 8) {
            //alias = alias.substring(0, 8);
        //}
        //u.alias = alias;
        update(u);
    }
}